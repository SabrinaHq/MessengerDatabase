------------------------------------LAB 2

SELECT * FROM TAB;

DESCRIBE USERS;
DESCRIBE USER_GROUP;
DESCRIBE CONVERSATION;
DESCRIBE MESSAGE;
DESCRIBE ADMIN;

--------add column
ALTER TABLE USER_GROUP
	ADD MAX_MEMBER NUMBER(10);

ALTER TABLE USER_GROUP DROP COLUMN MAX_MEMBER;

DESCRIBE USER_GROUP;

--------add multiple column

ALTER TABLE USERS
	ADD (RELATIONSHIP_STATUS VARCHAR(15),CONTACT_NO NUMBER(15));
DESCRIBE USERS;

--------modify

ALTER TABLE USERS MODIFY (CONTACT_NO NUMBER(11));
DESCRIBE USERS;

---------drop

ALTER TABLE USERS DROP COLUMN CONTACT_NO;
DESCRIBE USERS;

----------rename

ALTER TABLE USERS RENAME COLUMN CHAT_MODE TO STATUS;
DESCRIBE USERS;

----------update
UPDATE USERS SET LAST_NAME='ISLAM' WHERE USER_ID=5;

----------delete

DELETE FROM USERS WHERE USER_NAME='PRODHI';

------------------------------------------------------------

--------------------------------LAB 3

ALTER TABLE USERS DISABLE CONSTRAINT USER_PK;
ALTER TABLE USERS ENABLE CONSTRAINT USER_PK;


-----------------------------------LAB 4


-------SELECT OPERATION


SELECT USER_ID,USER_NAME,EMAIL FROM USERS;

SELECT * FROM CONVERSATION;

SELECT DISTINCT(RECEIVER_ID) FROM MESSAGE;

SELECT MESSAGE_CONTENT FROM MESSAGE WHERE SENDER_ID=1;

---------between
SELECT EMAIL FROM USERS WHERE USER_ID BETWEEN 2 AND 5;
SELECT EMAIL FROM USERS WHERE USER_ID NOT BETWEEN 2 AND 5;

---------comparison search

SELECT EMAIL FROM USERS WHERE USER_ID>2;
SELECT AGE FROM USERS WHERE AGE>20;
SELECT USER_NAME FROM USERS WHERE AGE>20 AND AGE<30;

---------in operation

SELECT USER_ID FROM USER_GROUP WHERE GROUP_NAME IN('COUSINS','CSE2K13');

-----------pattern matching
SELECT EMAIL FROM USERS WHERE USER_NAME LIKE '%abir%';
SELECT EMAIL FROM USERS WHERE USER_NAME LIKE '%ABIR%';

------------order by
SELECT MESSAGE_CONTENT FROM MESSAGE ORDER BY MESSAGE_CREATION_DATE;
SELECT MESSAGE_CONTENT FROM MESSAGE ORDER BY MESSAGE_CREATION_DATE DESC;
SELECT MESSAGE_CONTENT FROM MESSAGE ORDER BY MESSAGE_CREATION_DATE,MESSAGE_ID;

--------------aggregate functions

SELECT MAX(AGE) FROM USERS;
SELECT COUNT(*),SUM(AGE),AVG(AGE) FROM USERS;

----------------group by

SELECT AGE,COUNT(AGE) FROM USERS GROUP BY AGE;

----------------having

SELECT AGE,COUNT(AGE) FROM USERS GROUP BY AGE HAVING AGE>25;

----------------------------------------------------------------------------


------------------------------------LAB 5
-----------SUBQUERY

SELECT FIRST_NAME,LAST_NAME FROM USERS WHERE USER_ID IN (SELECT USER_ID FROM USER_GROUP WHERE GROUP_NAME='COUSINS');

SELECT C.USER_NAME,C.COUNTRY FROM USERS C WHERE C.USER_ID IN(SELECT O.SENDER_ID FROM MESSAGE O,USER_GROUP G
									 WHERE O.SENDER_ID=G.USER_ID AND G.GROUP_NAME='CSE2K13');


-----------UNION ALL

SELECT FIRST_NAME,LAST_NAME FROM USERS 
WHERE USER_ID<3 
UNION ALL
SELECT A.FIRST_NAME,A.LAST_NAME
FROM USERS A
WHERE A.USER_ID IN(SELECT P.USER_ONE FROM CONVERSATION P,MESSAGE M
							WHERE P.USER_ONE=M.SENDER_ID);



-------------UNION


SELECT FIRST_NAME,LAST_NAME FROM USERS 
WHERE USER_ID<5 
UNION 
SELECT A.FIRST_NAME,A.LAST_NAME
FROM USERS A
WHERE A.USER_ID IN(SELECT P.USER_ONE FROM CONVERSATION P,MESSAGE M
								WHERE P.USER_ONE=M.SENDER_ID);

---------------INTERSECT



SELECT FIRST_NAME,COUNTRY FROM USERS 
WHERE USER_ID>2 
INTERSECT 
SELECT A.FIRST_NAME,A.COUNTRY
FROM USERS A
WHERE A.USER_ID IN(SELECT P.USER_ID FROM USER_GROUP P,USERS U
							WHERE P.USER_ID=U.USER_ID);



----------------MINUS


SELECT FIRST_NAME,COUNTRY FROM USERS 
WHERE USER_ID<5
MINUS
SELECT FIRST_NAME,COUNTRY FROM USERS 
WHERE USER_ID<3;

-------------precedence of set operator

SELECT FIRST_NAME,COUNTRY FROM USERS 
WHERE USER_ID=5 
UNION 
SELECT A.FIRST_NAME,A.COUNTRY
FROM USERS A
WHERE A.USER_ID IN(SELECT P.USER_ONE FROM CONVERSATION P,MESSAGE M
								WHERE P.USER_ONE=M.SENDER_ID)
INTERSECT 
SELECT FIRST_NAME,COUNTRY FROM USERS
WHERE COUNTRY='Bangladesh';


-----------with parenthesis


SELECT FIRST_NAME,COUNTRY FROM USERS 
WHERE USER_ID=5 
UNION 
(SELECT A.FIRST_NAME,A.COUNTRY
FROM USERS A
WHERE A.USER_ID IN(SELECT P.USER_ONE FROM CONVERSATION P,MESSAGE M
								WHERE P.USER_ONE=M.SENDER_ID)
INTERSECT 
SELECT FIRST_NAME,COUNTRY FROM USERS
WHERE COUNTRY='Bangladesh'
);

-------------------------------------------------------------------

-----------------------------lab 6

----------------join

SELECT A.USER_NAME,A.EMAIL FROM USERS A JOIN MESSAGE M ON A.USER_ID=M.SENDER_ID;

----------------using
SELECT A.USER_NAME,A.EMAIL FROM USERS A JOIN USER_GROUP USING(USER_ID);

----------------natural join
SELECT A.USER_NAME,A.EMAIL FROM USERS A NATURAL JOIN USER_GROUP G;

---------------multiple condition
SELECT A.USER_NAME,A.EMAIL,G.GROUP_NAME FROM USERS A JOIN USER_GROUP G ON((A.USER_ID=G.USER_ID) AND (A.STATUS=G.STATUS));

---------------cross join
SELECT A.USER_NAME,A.EMAIL FROM USERS A CROSS JOIN USER_GROUP G;

-----------------outer joins
SELECT A.USER_NAME,A.EMAIL FROM USERS A LEFT OUTER JOIN USER_GROUP G ON A.USER_ID=G.GROUP_ID;
SELECT A.USER_NAME,A.EMAIL FROM USERS A RIGHT OUTER JOIN USER_GROUP G ON A.USER_ID=G.GROUP_ID;
SELECT A.USER_NAME,A.EMAIL FROM USERS A FULL OUTER JOIN USER_GROUP G ON A.USER_ID=G.GROUP_ID;
----------------------------------------------------LAB 7

-----------------PL/SQL

SET SERVEROUTPUT ON
DECLARE
   max_user_id  USERS.USER_ID%type;
BEGIN
   SELECT MAX(USER_ID)  INTO max_user_id 
   FROM USERS;
   DBMS_OUTPUT.PUT_LINE('The maximum user id is : ' || max_user_id);
 END;
/




SET  SERVEROUTPUT ON
BEGIN
  DELETE FROM MESSAGE
WHERE MESSAGE_CREATION_DATE<SYSDATE-30;
END;
/




--------------------------------------------------------lab 8

------------------while loop


SET SERVEROUTPUT ON

DECLARE

COUNTER NUMBER(2):=1;
NAME_OF_GROUP USER_GROUP.GROUP_NAME%TYPE;
DATE_OF_CREATION USER_GROUP.CREATE_DATE%TYPE;

BEGIN

WHILE COUNTER<=5

LOOP
	SELECT GROUP_NAME,CREATE_DATE INTO NAME_OF_GROUP,DATE_OF_CREATION FROM USER_GROUP WHERE GROUP_ID=COUNTER;

	DBMS_OUTPUT.PUT_LINE('RECORD '||COUNTER);
	DBMS_OUTPUT.PUT_LINE('NAME OF GROUP '||NAME_OF_GROUP);
	DBMS_OUTPUT.PUT_LINE('CREATED IN '||DATE_OF_CREATION);

	COUNTER:=COUNTER+1;

	END LOOP;

	EXCEPTION
	WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/



-----------for loop


SET SERVEROUTPUT ON

DECLARE

COUNTER NUMBER(2):=1;
NAME_OF_GROUP USER_GROUP.GROUP_NAME%TYPE;
DATE_OF_CREATION USER_GROUP.CREATE_DATE%TYPE;

BEGIN

	FOR COUNTER IN 1..5
	LOOP
	SELECT GROUP_NAME,CREATE_DATE INTO NAME_OF_GROUP,DATE_OF_CREATION FROM USER_GROUP WHERE GROUP_ID=COUNTER;

	DBMS_OUTPUT.PUT_LINE('RECORD '||COUNTER);
	DBMS_OUTPUT.PUT_LINE('NAME OF GROUP '||NAME_OF_GROUP);
	DBMS_OUTPUT.PUT_LINE('CREATED IN '||DATE_OF_CREATION);
	END LOOP;
	EXCEPTION
	WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

------------loop


SET SERVEROUTPUT ON


DECLARE

COUNTER NUMBER(2):=0;
NAME_OF_GROUP USER_GROUP.GROUP_NAME%TYPE;
DATE_OF_CREATION USER_GROUP.CREATE_DATE%TYPE;


BEGIN

LOOP
	
	COUNTER:=COUNTER+1;
	SELECT GROUP_NAME,CREATE_DATE INTO NAME_OF_GROUP,DATE_OF_CREATION FROM USER_GROUP WHERE GROUP_ID=COUNTER;
	DBMS_OUTPUT.PUT_LINE(NAME_OF_GROUP||' '||DATE_OF_CREATION);
	EXIT WHEN COUNTER>5;
	END LOOP;
	EXCEPTION
	WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/


-----------cursor



SET SERVEROUTPUT ON
DECLARE
     CURSOR msg_cur IS
  SELECT MESSAGE_CONTENT,MESSAGE_CREATION_DATE FROM MESSAGE;
  record msg_cur%ROWTYPE;

BEGIN
OPEN msg_cur;
      LOOP
        FETCH msg_cur INTO record;
        EXIT WHEN msg_cur%ROWCOUNT>3;
        DBMS_OUTPUT.PUT_LINE ('Message body : ' || record.MESSAGE_CONTENT || ' Creation date : ' || record.MESSAGE_CREATION_DATE);  
	END LOOP;
      CLOSE msg_cur;   
END;
/
  

------------procedure


SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE get_user IS
	userid USERS.USER_ID%type;
	name USERS.USER_NAME%type;
	emailid USERS.EMAIL%type;
BEGIN
	userid:=4;
	SELECT USER_NAME,EMAIL INTO name,emailid FROM USERS WHERE USER_ID=userid;
	DBMS_OUTPUT.PUT_LINE('Name : '||name||' Email : '||emailid);
END;
/
SHOW ERRORS;

BEGIN
 get_user;
 END;
 /


SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE add_group(
  groupid USER_GROUP.GROUP_ID%TYPE,
  insertname USER_GROUP.GROUP_NAME%TYPE) IS
BEGIN
  INSERT INTO USER_GROUP(GROUP_ID,GROUP_NAME)
  VALUES (groupid,insertname);
  COMMIT;
END add_group;
/
SHOW ERRORS;

BEGIN
 add_group(7,'ECE 2K13');
 END;
 /


-------------function

CREATE OR REPLACE FUNCTION avg_age RETURN NUMBER IS
AVG_AGE USERS.AGE%TYPE;

BEGIN
SELECT AVG(AGE) INTO AVG_AGE FROM USERS;
RETURN AVG_AGE;
END;
/

SET SERVEROUTPUT ON 
BEGIN
DBMS_OUTPUT.PUT_LINE('AVERAGE AGE OF USERS : '||AVG_AGE);
END;
/


CREATE OR REPLACE FUNCTION get_groupname(
 username IN USERS.USER_NAME%TYPE)
RETURN VARCHAR IS
groupname USER_GROUP.GROUP_NAME%TYPE;


BEGIN
SELECT G.GROUP_NAME INTO groupname FROM USER_GROUP G WHERE G.USER_ID IN(SELECT USER_ID FROM USERS WHERE USER_NAME=username); 
RETURN groupname;
END;
/

show errors;

SET SERVEROUTPUT ON
BEGIN
DBMS_OUTPUT.PUT_LINE('USER NAME: '||get_groupname('LAMIYA'));
END;
/


---------------------------------------------------------lab 9
-----------------------TRIGGER


CREATE OR REPLACE TRIGGER check_id BEFORE INSERT OR UPDATE ON
USERS
FOR EACH ROW
DECLARE
MAX_ID CONSTANT NUMBER(10):=1000;
MIN_ID CONSTANT NUMBER(10):=1;
BEGIN
IF :NEW.USER_ID>MAX_ID OR :NEW.USER_ID<MIN_ID THEN
RAISE_APPLICATION_ERROR(-20000,'INVALID ID');
END IF;
END;
/


-----------------------


---------disable trigger

ALTER TABLE USERS DISABLE ALL TRIGGERS;

----------enable trigger

ALTER TABLE USERS ENABLE ALL TRIGGERS;


------------transactions

SELECT SYSDATE FROM DUAL;

SELECT CURRENT_DATE FROM DUAL;

SELECT SYSTIMESTAMP FROM DUAL;

------------add months

SELECT ADD_MONTHS(MESSAGE_CREATION_DATE,1) AS ONE_MONTH FROM MESSAGE WHERE MESSAGE_ID=2;

------------last day

SELECT LAST_DAY(MESSAGE_CREATION_DATE) FROM MESSAGE;

------------extract


SELECT MESSAGE_CONTENT,EXTRACT(MONTH FROM MESSAGE_CREATION_DATE) AS MONTHS FROM MESSAGE;

SELECT SENDER_ID,EXTRACT(YEAR FROM MESSAGE_CREATION_DATE) AS YEAR FROM MESSAGE;








